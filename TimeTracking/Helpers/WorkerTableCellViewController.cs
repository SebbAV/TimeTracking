// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

namespace TimeTracking
{
	public partial class WorkerTableCellViewController : UITableViewCell
	{
        public static readonly NSString key = new NSString(nameof(WorkerTableCellViewController));
        CustomEventHandler HandlerForButton;
        int CellPosition;
		public WorkerTableCellViewController (IntPtr handle) : base (handle)
		{
		}
        public string LblHours { get => lblHours.Text; set => lblHours.Text = value; }
        public string LblAmount { get => lblAmount.Text; set => lblAmount.Text = value; }
        public UIButton BtnDetails { get => btnDetails; set => btnDetails = value; }


        public override void PrepareForReuse(){
            base.PrepareForReuse();
            if(HandlerForButton != null){
                BtnDetails.TouchUpInside -= ButtonPressed;
            }
            CellPosition = -1;
            HandlerForButton = null;
        }
        private void ButtonPressed(object sender, EventArgs args)
        {
            var eventArgs = new CustomEventArgs(this, CellPosition);

            if (HandlerForButton != null)
            {
                HandlerForButton(this, eventArgs);
            }
        }
        internal void GetCell(int position, CustomEventHandler handler)
        {
            HandlerForButton = handler;
            CellPosition = position;
             BtnDetails.TouchUpInside += ButtonPressed;
        }
	}
    internal class CustomEventArgs : EventArgs
    {
        public WorkerTableCellViewController Cell { get; private set; }

        public int Position { get; private set; }

        public CustomEventArgs(WorkerTableCellViewController cell, int position)
        {
            this.Cell = cell;
            this.Position = position;
        }
    }
}
