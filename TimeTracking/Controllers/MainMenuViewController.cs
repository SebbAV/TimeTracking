// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Firebase.Database;
using System.Collections.Generic;

namespace TimeTracking
{
    public partial class MainMenuViewController : UIViewController, IUICollectionViewDataSource, IUICollectionViewDelegate, IUICollectionViewDelegateFlowLayout
    {
        List<Employee> lst_employees;

    //    object[] employees = { "id", "name", "position", "rfid" };
		public MainMenuViewController (IntPtr handle) : base (handle)
		{
            
		}
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            CollectionView.Delegate = this;
            CollectionView.DataSource = this;
            lst_employees = new List<Employee>();
            DatabaseReference root = Database.DefaultInstance.GetRootReference();
            DatabaseReference userNode = root.GetChild("team_members");
            userNode.ObserveEvent(DataEventType.ChildChanged, (snapshot, prevKey) => {
               var data = snapshot.GetValue<NSDictionary>();
             //  var created = data["created"].ToString();
             //  var lastModified = data["lastModified"].ToString();
            //   var name = data["name"].ToString();
            //   var notesCount = (data["notesCount"] as NSNumber).UInt32Value;


            //   folders.Add(folder);

             //  TableView.ReloadData();
           });
            userNode.ObserveSingleEvent(DataEventType.Value, (snapshot) => {
                var data = snapshot.GetValue<NSDictionary>();
                var employees = data.Values;
                foreach (var employee in employees)
                {
                    Employee temp_employee = new Employee();
                    temp_employee.Name =  employee.ValueForKey(new NSString("name")).ToString();
                    temp_employee.Id = employee.ValueForKey(new NSString("id")).ToString();
                    temp_employee.RFID = employee.ValueForKey(new NSString("rfid")).ToString();
                    temp_employee.Position = employee.ValueForKey(new NSString("position")).ToString();

                    lst_employees.Add(temp_employee);

                }
                CollectionView.ReloadData();
              
            }, (error) => {
                Console.WriteLine(error.LocalizedDescription);
            });
        }

        public UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath)
        {
            var cell = collectionView.DequeueReusableCell(CollectionCellViewController.Key, indexPath) as CollectionCellViewController;
            cell.Name = lst_employees[indexPath.Row].Name;
            cell.Position = lst_employees[indexPath.Row].Position;
            cell.BackgroundColor = UIColor.LightGray;
            return cell;
        }

        public nint GetItemsCount(UICollectionView collectionView, nint section)
        {
            return lst_employees.Count;
        }
	}
}
