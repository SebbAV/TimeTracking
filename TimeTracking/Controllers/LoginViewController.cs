// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Firebase.Auth;
using Firebase.Database;
using TimeTracking.Models;
using System.Collections.Generic;

namespace TimeTracking
{
	public partial class LoginViewController : UIViewController
	{
        public LoginViewController (IntPtr handle) : base (handle) {}
        DatabaseReference root = Database.DefaultInstance.GetRootReference();
        DatabaseReference userNode;
        Employee selected_employee;
        TimeTrackingClass timeTracking;
        List<TimeTrackingClass> lst_timetracking;
        DatabaseReference time_trackingNode;
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            selected_employee = new Employee();
            userNode = root.GetChild("team_members");
            time_trackingNode = root.GetChild("time_tracking");
            btnLogin.TouchUpInside += BtnLogin_TouchUpInside;


      }

        void BtnLogin_TouchUpInside(object sender, EventArgs e) => Auth.DefaultInstance.SignIn(lblUser.Text, lblPassword.Text, HandleAuthResultHandler);

        void HandleAuthResultHandler(User user, NSError error)
        {

            if (error != null)
            {
                AuthErrorCode errorCode;
                if (IntPtr.Size == 8) // 64 bits devices
                    errorCode = (AuthErrorCode)((long)error.Code);
                else // 32 bits devices
                    errorCode = (AuthErrorCode)((int)error.Code);

                // Posible error codes that SignIn method with email and password could throw
                // Visit https://firebase.google.com/docs/auth/ios/errors for more information
                switch (errorCode)
                {
                    case AuthErrorCode.OperationNotAllowed:
                        break;
                    case AuthErrorCode.InvalidEmail:
                        CallAlert("Wrong Email", "Please check that your Email is correct");
                        break;
                    case AuthErrorCode.UserDisabled:
                        CallAlert("Invalid Account", "Please contact your system administrator if you believe this is in error");
                        break;
                    case AuthErrorCode.WrongPassword:
                        CallAlert("Wrong Password", "Please check that your password is correct");
                        break;

                    default:
                        CallAlert("Error", "Please check your Email address");
                        break;
                }
            }
                else
                {
                    userNode.ObserveSingleEvent(DataEventType.Value, (snapshot) =>
                     {
                         try
                         {
                             var data = snapshot.GetValue<NSDictionary>();
                             var employees = data.Values;
                            //For each eployee found in the team_members users. It adds it to our global list.
                            foreach (var employee in employees)
                             {
                                 if (user.Uid == employee.ValueForKey(new NSString("authid")).ToString())
                                 {
                                     if ("administrator" == employee.ValueForKey(new NSString("roles")).ToString())
                                     {
                                         PerformSegue("LoginSegue", null);
                                     }
                                     else
                                     {
                                         selected_employee = new Employee();
                                         selected_employee.Name = employee.ValueForKey(new NSString("name")).ToString();
                                         selected_employee.Id = employee.ValueForKey(new NSString("id")).ToString();
                                         selected_employee.RFID = employee.ValueForKey(new NSString("rfid")).ToString();
                                         selected_employee.Position = employee.ValueForKey(new NSString("position")).ToString();
                                         selected_employee.Fare = Double.Parse(employee.ValueForKey(new NSString("fare")).ToString());
                                         PerformSegue("WorkerSegue", null);
                                     }
                                 }
                             }
                         }
                         catch (Exception ex)
                         {
                             CallAlert("Error", "Inactive Account");
                         }


                     });
                }
            }

        void CallAlert(string title, string message){
            var alert = UIAlertController.Create(title, message, UIAlertControllerStyle.Alert);
            alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, null));
            PresentViewController(alert, true, null);
        }
        public override void PrepareForSegue(UIStoryboardSegue segue, Foundation.NSObject sender)
        {
            base.PrepareForSegue(segue, sender);
            if (segue.Identifier != "WorkerSegue")
                return;
            (segue.DestinationViewController as WorkerMainMenuTableViewController).Employee = selected_employee;


        }

	}
}
