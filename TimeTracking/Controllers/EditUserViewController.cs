// This file has been autogenerated from a class added in the UI designer.

using System;
using Firebase.Database;
using Foundation;
using UIKit;

namespace TimeTracking
{
    public partial class EditUserViewController : UIViewController
    {
        #region Class Variables
        DatabaseReference root = Database.DefaultInstance.GetRootReference();
        DatabaseReference userNode, rfidNode;
        Employee user_id;
        #endregion

        public EditUserViewController(IntPtr handle) : base(handle)
        {
        }
        public Employee Id
        {
            get;
            set;
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            //Gets the information of the employee, received from the segue.
            user_id = Id;
            //Gets the a team memeber containing the received user id.
            userNode = root.GetChild("team_members").GetChild(user_id.Id);
            //Gets the rfid found with the user rfid code.
            rfidNode = root.GetChild("rfid").GetChild(user_id.RFID);
            //Creates an observe event from the rfid node.
            rfidNode.ObserveSingleEvent(DataEventType.Value, (snapshot) =>
            {
                if (snapshot == null)
                {

                }
                else
                {
                    //Sets the information to the user input.
                    var data = snapshot.GetValue<NSDictionary>();
                    lblRfid.Text = data.ValueForKey(new NSString("tag")).ToString();
                }
            });
            //Sets the received information to the user input.
            lblName.Text = user_id.Name;
            lblAmount.Text = user_id.Fare.ToString();
            lblPosition.Text = user_id.Position;



           
        }
        partial void editUser_TouchUpInside(NSObject sender)
        {
            //Gets the data from the inputs
            double fare = 0;
            if (Double.TryParse(lblAmount.Text, out fare))
            {
                fare = Double.Parse(lblAmount.Text);
            }
            string position = lblPosition.Text;
            string name = lblName.Text;
            string role = "user";
            if(switchAdmin.On){
                role = "administrator";
            }
            string rfid = lblRfid.Text;
            if (fare <= 0 || fare.ToString() == null || fare.ToString().Length <= 0)
            {
                CallAlert("Error adding the user", "The amount can't be lower than one.");
            }
            if (rfid == null || rfid.Length <= 0)
            {
                CallAlert("Error adding the user", "The rfid can't be in blank.");
            }
            if (position.Length <= 0 || position == null || name == null || name.Length <= 0)
            {
                CallAlert("Error adding the user", "Do not leave empty fields.");
            }
            else
            {
                //Set the keys and value for the rfid node.
                object[] rfid_keys = { "id", "status", "tag" };
                object[] rfid_val = { user_id.RFID, 0, lblRfid.Text };
                var rfid_data = NSDictionary.FromObjectsAndKeys(rfid_val, rfid_keys, rfid_keys.Length);
                rfidNode.SetValue(rfid_data);          
                //Set the keys and value for the team_member node.
                object[] keys = { "authid", "fare", "id", "name", "position", "rfid","roles" };
                object[] values = { user_id.AuthID, fare, user_id.Id, lblName.Text, lblPosition.Text, user_id.RFID,role };
                var obj = NSDictionary.FromObjectsAndKeys(values, keys, keys.Length);
                userNode.SetValue(obj);
                //Returns to the main menu.
                this.NavigationController.PopViewController(true);
            }
        }
        void CallAlert(string title, string message)
        {
            var alert = UIAlertController.Create(title, message, UIAlertControllerStyle.Alert);
            alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, null));
            PresentViewController(alert, true, null);
        }
    }
}