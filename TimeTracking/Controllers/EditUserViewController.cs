// This file has been autogenerated from a class added in the UI designer.

using System;
using Firebase.Database;
using Foundation;
using UIKit;

namespace TimeTracking
{
    public partial class EditUserViewController : UIViewController
    {
        DatabaseReference root = Database.DefaultInstance.GetRootReference();
        DatabaseReference userNode, rfidNode;
        Employee user_id;
        public EditUserViewController(IntPtr handle) : base(handle)
        {
        }
        public Employee Id
        {
            get;
            set;
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            user_id = Id;
            userNode = root.GetChild("team_members").GetChild(user_id.Id);
            rfidNode = root.GetChild("rfid").GetChild(user_id.RFID);
            rfidNode.ObserveSingleEvent(DataEventType.Value, (snapshot) =>
            {
                if (snapshot == null)
                {

                }
                else
                {
                    var data = snapshot.GetValue<NSDictionary>();
                    lblRfid.Text = data.ValueForKey(new NSString("tag")).ToString();
                }
            });
            lblName.Text = user_id.Name;
            lblAmount.Text = user_id.Fare.ToString();
            lblPosition.Text = user_id.Position;



           
        }
        partial void editUser_TouchUpInside(NSObject sender)
        {
            double fare = Double.Parse(lblAmount.Text);
            string position = lblPosition.Text;
            string name = lblName.Text;
            if (fare < 0 || fare.ToString() == null || fare.ToString().Length <= 0 || position.Length <= 0 || position == null || name == null || name.Length <= 0)
            {
                //TODO: Add warning to user;
            }
            else
            {
                object[] rfid_keys = { "id", "status", "tag" };
                object[] rfid_val = { user_id.RFID, 0, lblRfid.Text };
                var rfid_data = NSDictionary.FromObjectsAndKeys(rfid_val, rfid_keys, rfid_keys.Length);
                rfidNode.SetValue(rfid_data);                                                                                                                                                                                                    
                object[] keys = { "authid", "fare", "id", "name", "position", "rfid" };
                object[] values = { user_id.AuthID, fare, user_id.Id, lblName.Text, lblPosition.Text, user_id.RFID };
                var obj = NSDictionary.FromObjectsAndKeys(values, keys, keys.Length);
                userNode.SetValue(obj);
                this.NavigationController.PopViewController(true);
            }
        }
    }
}