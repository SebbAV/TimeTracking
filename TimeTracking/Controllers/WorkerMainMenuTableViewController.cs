// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Firebase.Auth;
using Firebase.Database;
using Foundation;
using TimeTracking.Models;
using UIKit;

namespace TimeTracking
{
	public partial class WorkerMainMenuTableViewController : UITableViewController
	{
        Employee employee_details;
        List<TimeTrackingClass> lst_timetracking;
        DatabaseReference root = Database.DefaultInstance.GetRootReference();
        DatabaseReference time_trackingNode;
        TimeTrackingClass timeTracking;
        public Employee Employee { get; set; }
        public Employee EmployeeAdmin { get; set; }
        public string user_id { get; set; }
        public WorkerMainMenuTableViewController (IntPtr handle) : base (handle) {}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            lst_timetracking = new List<TimeTrackingClass>();
            //TODO: Validate if user has no time to delete the top bar.
            if(Employee == null){
                employee_details = EmployeeAdmin;
                navWorker.Hidden = true;
            }
            else {
                employee_details = Employee;
            }
            if(employee_details.WorkedTime == null){
                time_trackingNode = root.GetChild("time_tracking");
                loadUserTimes();
            }
            else {
                navWorker.Hidden = true;
            }
        }

        /// <summary>
        /// Method to create a single event to check for values in the timetracking node.
        ///This contains all the dates that the employees has work.
        /// </summary>
        public void loadUserTimes()
        {
          
            DatabaseReference user_ttNode = time_trackingNode.GetChild(employee_details.Id);
            user_ttNode.ObserveSingleEvent(DataEventType.Value, (snapshot) =>
            {
                try
                {
                var data = snapshot.GetValue<NSDictionary>();
                //Gets the keys for each user in the table.
                var keys = data.Keys;

                double employee_payment = 0;
                //Adds the key to the temporary list.
                employee_details.FortNightWorkedTime = new TimeSpan(0, 0, 0);
                foreach (var time in data.Values)
                {
                    //Gets the information found in the time_tracking node. This also calculates the worked time of the user and stores it into
                    //a list
                    timeTracking = new TimeTrackingClass();
                    timeTracking.End_Date = DateTime.Parse(time.ValueForKey(new NSString("end_date")).ToString());
                    timeTracking.Start_Date = DateTime.Parse(time.ValueForKey(new NSString("start_date")).ToString());


                    DateTime currentDate = DateTime.Now;
                    if (currentDate.Month == timeTracking.Start_Date.Month)
                    {
                        if (timeTracking.Start_Date.Day < 15 && currentDate.Day < 15)
                        {

                            TimeSpan worked_time = (timeTracking.End_Date - timeTracking.Start_Date);
                            employee_payment += Math.Round(worked_time.TotalHours, 2);
                            employee_details.FortNightWorkedTime += worked_time;
                            lst_timetracking.Add(timeTracking);
                        }


                        if (currentDate.Day > 15 && timeTracking.Start_Date.Day > 15)
                        {
                            TimeSpan worked_time = (timeTracking.End_Date - timeTracking.Start_Date);
                            employee_payment += Math.Round(worked_time.TotalHours, 2);
                            employee_details.FortNightWorkedTime += worked_time;
                            lst_timetracking.Add(timeTracking);

                        }
                    }
                }
                employee_payment = 0;
                employee_details.WorkedTime = lst_timetracking;
                lst_timetracking = new List<TimeTrackingClass>();
                TableView.ReloadData();
            }
                catch (Exception ex ) {}
            });
        }

        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath){
            var cell = tableView.DequeueReusableCell(WorkerMainMenuTableCellViewController.key, indexPath) as WorkerMainMenuTableCellViewController;
            if (employee_details != null && employee_details.WorkedTime != null)
            {
                cell.LblStart = employee_details.WorkedTime[indexPath.Row].Start_Date.ToString();
                cell.LblEnd = employee_details.WorkedTime[indexPath.Row].End_Date.ToString();
                TimeSpan worked_time = employee_details.WorkedTime[indexPath.Row].End_Date - employee_details.WorkedTime[indexPath.Row].Start_Date;
                cell.LblTime = worked_time.ToString();
            }
            else {
                cell.LblStart = "0:00:00";
                cell.LblEnd = "0:00:00";
                cell.LblTime = "0:00:00";
            }
            return cell;

        }
        public override nint RowsInSection(UITableView tableView, nint section) => employee_details.WorkedTime != null ? employee_details.WorkedTime.Count : 1;
        [Export("numberOfSectionsInTableView:")]
        public override nint NumberOfSections(UITableView tableView) => 1;
        [Export("tableView:titleForHeaderInSection:")]
        public override string TitleForHeader(UITableView tableView, nint section) => employee_details != null ? employee_details.Name : "No Name";

        public override void PrepareForSegue(UIStoryboardSegue segue, Foundation.NSObject sender)
        {
            base.PrepareForSegue(segue, sender);
            return;


        }

        partial void logout_TouchUpInside(NSObject sender)
        {
            NSError error;
            var signedOut = Auth.DefaultInstance.SignOut(out error);

            if (!signedOut)
            {
                AuthErrorCode errorCode;
                if (IntPtr.Size == 8) // 64 bits devices
                    errorCode = (AuthErrorCode)((long)error.Code);
                else // 32 bits devices
                    errorCode = (AuthErrorCode)((int)error.Code);

                // Posible error codes that SignOut method with credentials could throw
                // Visit https://firebase.google.com/docs/auth/ios/errors for more information
                switch (errorCode)
                {
                    case AuthErrorCode.KeychainError:
                    default:
                        break;
                }
            }
            else {
                PerformSegue("loginSegue", null);
            }
        }
    }
}
